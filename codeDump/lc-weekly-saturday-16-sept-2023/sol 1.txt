Minimum Right Shifts to Sort the Array
User Accepted:14577
User Tried:16283
Total Accepted:15274
Total Submissions:29524
Difficulty:Easy
You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.

A right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.

Solutions: 

class Solution:
    def minimumRightShifts(self, nums: List[int]) -> int:
    #print(nums)
  #  print(nums)
        if len(nums)==1:
            return 0
        for i in range(0,len(nums)): #n-1 times loop
            for j in range(0,len(nums)-1):
                #print(nums[j],'here',nums[j+1])
                if nums[j]>nums[j+1]:
                 #   print(nums)
                #    print(nums[j],'here',nums[j+1])
                    break
                if j==len(nums)-2:
                    return i
            temp=nums.pop()
            nums.insert(0,temp)
            #print(nums)
            if i==len(nums)-1:
                return -1
                    
                
        