class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
from typing import Optional
from collections import deque
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
            d=deque()
            temp=head
            while temp:
                d.append(temp)
                temp=temp.next
            while d: #every iteration try two insertion, one from front of the list, one from the other end
                if not temp:
                    temp=d.popleft()
                else:
                    temp.next=d.popleft()
                    temp=temp.next
                if d:
                    temp.next=d.pop()
                    temp=temp.next #for second insertion
            temp.next=None #last node

# Helper function to create a linked list from a list of values
def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for value in values[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

# Helper function to print the linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" -> " if current.next else "\n")
        current = current.next

# Create linked list 1 -> 2 -> 3 -> 4 -> 5
values = [1, 2, 3, 4, 5]
head = create_linked_list(values)

print("Original linked list:")
print_linked_list(head)

# Reverse the linked list
solution = Solution()
reversed_head = solution.reorderList(head)

print("Reordered linked list:")
print_linked_list(head)
