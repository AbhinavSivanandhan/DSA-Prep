Problem:
https://leetcode.com/problems/add-two-numbers/

sol1:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry=0
        head=None
        while l1 or l2:
            if head is None:
                temp=ListNode()
                head=temp
            else:
                dummy=ListNode()
                temp.next=dummy
                temp=dummy
            temp.val=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)%10
            carry=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)//10
            if l1:
                l1=l1.next
            if l2:
                l2=l2.next
        if carry!=0:
            dummy=ListNode()
            temp.next=dummy
            temp=dummy
            temp.val=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)%10
        return head
            
sol2:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        s1,s2='',''
        temp1=l1
        temp2=l2
        while temp1 is not None:
            s1+=str(temp1.val)
            temp1=temp1.next
        while temp2 is not None:
            s2+=str(temp2.val)
            temp2=temp2.next
        s1,s2=s1[::-1],s2[::-1]
        s1,s2=int(s1),int(s2)
        res=str(s1+s2)
        res=res[::-1]
        head=None
        for i in res:
            if head is None:
                head=ListNode()
                temp=head
                temp.val=i
            else:
                temp.next=ListNode()
                temp=temp.next
                temp.val=i

        return head