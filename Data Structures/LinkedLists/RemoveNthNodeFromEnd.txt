Problem:
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Best Solution:
Time Complexity:

O(n) - Linear time complexity.
Space Complexity:

O(1) - Constant space complexity.

Code:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        fast=head
        slow=head
        for _ in range(n):
            fast=fast.next
        if not fast: return head.next
        while fast.next:
            fast=fast.next
            slow=slow.next
        slow.next=slow.next.next
        return head
        


Solution 1 : Find length of list, and then traverse again to find nth index from end
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        temp=head
        i=-1
        while temp:
            i+=1
            temp=temp.next
        indexVal=i-(n-1) #check
        temp=head
        i=-1
        prev=None
        while temp:
            i+=1
            if i==indexVal:
                if prev:
                    prev.next=temp.next
                else:
                    head=head.next
                break
            prev=temp
            temp=temp.next
        return head

Solution 2 : Use two pointers, traverse one by distance of which it is from the end

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        temp=head
        tempforward=head
        prev=None
        for i in range(1,n):
            if tempforward:
                tempforward=tempforward.next
            # else:
            #     return "Not Possible"
        
        # temp=head
        while tempforward:
            if tempforward.next==None:
                if prev:
                    prev.next=temp.next
                else:
                    head=head.next
                break#no need
            prev=temp
            temp=temp.next
            tempforward=tempforward.next
        return head

        