Problem:
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Solution 1 : Find length of list, and then traverse again to find nth index from end
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        temp=head
        i=-1
        while temp:
            i+=1
            temp=temp.next
        indexVal=i-(n-1) #check
        temp=head
        i=-1
        prev=None
        while temp:
            i+=1
            if i==indexVal:
                if prev:
                    prev.next=temp.next
                else:
                    head=head.next
                break
            prev=temp
            temp=temp.next
        return head

Solution 2 : Use two pointers, traverse one by distance of which it is from the end

