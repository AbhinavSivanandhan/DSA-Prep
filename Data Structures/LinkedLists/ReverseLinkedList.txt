Question: Reverse a linkedlist
Given the head of a singly linked list, reverse the list, and return the reversed list.

Solution:
The time complexity of the algorithm is O(n), where n is the number of nodes in the linked list.

The space complexity of the algorithm is O(1), indicating constant space usage.
Code:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev=None
        temp=head
        while temp is not None:
            after=temp.next
            temp.next=prev
            prev=temp
            temp=after
        return prev

how to run linkedlist code in colab and test:
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        temp = head
        while temp:
            cur = temp
            temp = temp.next
            cur.next = prev
            prev = cur
        return prev

# Helper function to create a linked list from a list of values
def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for value in values[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

# Helper function to print the linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" -> " if current.next else "\n")
        current = current.next

# Create linked list 1 -> 2 -> 3 -> 4 -> 5
values = [1, 2, 3, 4, 5]
head = create_linked_list(values)

print("Original linked list:")
print_linked_list(head)

# Reverse the linked list
solution = Solution()
reversed_head = solution.reverseList(head)

print("Reversed linked list:")
print_linked_list(reversed_head)
