You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Code:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry=0
        head=None
        while l1 or l2:
            if head is None:
                temp=ListNode()
                head=temp
            else:
                dummy=ListNode()
                temp.next=dummy
                temp=dummy
            temp.val=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)%10
            carry=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)//10
            if l1:
                l1=l1.next
            if l2:
                l2=l2.next
        if carry!=0:
            dummy=ListNode()
            temp.next=dummy
            temp=dummy
            temp.val=((l1.val if l1 else 0) + (l2.val if l2 else 0)+carry)%10
        return head
            
