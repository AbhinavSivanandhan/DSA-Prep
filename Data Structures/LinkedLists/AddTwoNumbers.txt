**Time complexity: O(m+n)**

**Space complexity: O(1)**

Where m is the length of l1 and n is the length of l2.

```python
from typing import Optional

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()  # Dummy head to track the start of the result list
        cur = dummy  # Pointer to traverse and build the result list
        carry = 0  # Track carry from sum
        
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            total = val1 + val2 + carry
            carry = total // 10  # Compute carry for the next place
            cur.next = ListNode(total % 10)  # Store the unit digit
            
            cur = cur.next  # Move to the new node
            
            if l1:
                l1 = l1.next  # Move to the next node in l1
            if l2:
                l2 = l2.next  # Move to the next node in l2
        
        return dummy.next  # Return the actual head of the new list

```