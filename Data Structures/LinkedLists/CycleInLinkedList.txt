Problem:
Find if there is a cycle in the linkedlist

MySolution1(Use a dictionary):

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        temp=head
        d={}
        while temp:
            if temp not in d:
                d[temp]=1
            else:
                return True
            temp=temp.next
        return False

MySolution 2(Floyd's cycle detection algorithm) - use two pointers:

Time Complexity:
The time complexity of this algorithm is O(n), where 'n' is the number of nodes in the linked list. In the worst case, the algorithm will iterate through the entire linked list once. The slow pointer (temp) moves one step at a time, and the fast pointer (twotemp) moves two steps at a time. If there is a cycle, the fast pointer will eventually catch up with the slow pointer, detecting the cycle. The loop continues until either the fast pointer reaches the end (no cycle) or the two pointers meet within the loop.

Space Complexity:
The space complexity is O(1). The algorithm uses only a constant amount of extra space regardless of the size of the linked list. It employs two pointers (temp and twotemp) to traverse the list and detect a cycle. No additional data structures are used, and the space requirements remain constant.

My solution1:
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow=head
        fast=head
        while slow and fast: #this line handles head is None condition also
            slow=slow.next
            if fast.next:
                fast=fast.next.next
            else:
                return False
            if slow==fast:
                return True
        return False

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head:
            return False
        temp = head
        twotemp = head
        while temp and twotemp:
            temp = temp.next
            if twotemp.next:
                twotemp = twotemp.next.next
            else:
                return False  # If twotemp reaches the end, there's no cycle
            if temp == twotemp:
                return True
        return False

