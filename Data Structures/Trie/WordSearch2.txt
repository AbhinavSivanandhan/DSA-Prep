Problem:
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Hint: Doing brute force just like Word Search 1 will lead to time complexity of w * r * c * 4^(r*c) where r,c are rows and columns, w is number of words in word list

To reduce this time complexity we use Trie so that we don’t have to try with every word at every position. we use every position on grid just once but still check all words. (essentially maintaining time complexity of word search 1, despite the additional complexity of word search2, which is an awesome feat).

Hint2: Don't make the board a trie, that is brute force and will take w*m*n*(4^mn) time (m,n are board dimensions and w is number of words in word list(so basically see the board positions for every word). this is so inefficient and expensive)
instead do the reverse, make the word list a trie instead so you can search for one or the other and find them

**Time complexity: O(m∗4n)**

**Space complexity: O(n)**

**Where** m **is the number of cells in the** board **and** n **is the length of the** word

Solution:
class TrieNode:
    def __init__(self):
        self.children = {}
        self.isWord = False

    def addWord(self, word):
        cur = self
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.isWord = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TrieNode()
        for w in words:
            root.addWord(w)
        ROWS, COLS = len(board), len(board[0])
        res, visit = set(), set()

        def dfs(r, c, node, word):
            if (r<0 or c<0 or r==ROWS or c==COLS or board[r][c] not in node.children or (r,c) in visit):
                return
            
            visit.add((r,c))
            node = node.children[board[r][c]]
            word += board[r][c]
            if node.isWord:
                res.add(word)
            dfs(r+1,c,node,word)
            dfs(r-1,c,node,word)
            dfs(r,c+1,node,word)
            dfs(r,c-1,node,word)
            visit.remove((r,c))
        
        for r in range(ROWS):
            for c in range(COLS):
                dfs(r,c,root,"")
        
        return list(res)
