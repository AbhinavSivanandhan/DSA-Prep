Problem:



- **addWord(word)**: Time complexity is **O(L)**, where `L` is the length of the word. Space complexity is **O(L)** for the trie structure.

- **search(word)**: Time complexity is **O(L * 26^D)**, where `L` is the word length and `D` is the maximum depth of the trie. Space complexity is **O(L)** due to recursion stack.

- Overall, the space complexity is **O(n * L + L)**, where `n` is the number of words and `L` is the average word length.

Code:

class TrieNode: #stores children-values(keys) and EOW
    def __init__(self):  
        self.children = {}
        self.word = False 

class WordDictionary:

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        cur = self.root
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.word = True
    
    def search(self, word: str) -> bool:
        def dfs(j, root):
            cur = root
            
            for i in range(j, len(word)):
                c = word[i]
                if c==".":
                    for child in cur.children.values():
                        if dfs(i+1, child):
                            return True
                    return False
                else:
                    if c not in cur.children:
                        return False
                    cur = cur.children[c]
            return cur.word
        return dfs(0,self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
