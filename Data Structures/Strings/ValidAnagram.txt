Problem:
Given two strings s and t, return true if t is an anagram of s, and false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Original(preferred) Solution:

Explanation: Uses a dictionary to count character frequencies in both strings and checks if all character frequencies are zero.
Time-complexity: O(n), where n is the length of the longer of the two input strings.
Space-complexity: O(n), where n is the length of the longer of the two input strings.
Additional Note: Efficient for cases with a significant number of unique characters, especially in long strings.

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        count = defaultdict(int)
        
        # Count the frequency of characters in string s
        for x in s:
            count[x] += 1
        
        # Decrement the frequency of characters in string t
        for x in t:
            count[x] -= 1
        
        # Check if any character has non-zero frequency
        for val in count.values():
            if val != 0:
                return False
        
        return True

Alternate, less efficient solution(despite similar time-complexity):

Explanation: Checks if the sorted versions of the two strings are equal.
Time-complexity: O(n log n), where n is the length of the longer of the two input strings.
Space-complexity: O(n), where n is the length of the longer of the two input strings.
Additional Note: Simpler but potentially less efficient due to sorting overhead, especially for long strings.

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)
