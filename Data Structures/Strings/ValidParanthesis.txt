Problem:
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.


Solution1:
Time Complexity:
The time complexity is O(n), where n is the length of the input string. This is because the algorithm iterates through each character in the string exactly once, and each operation inside the loop takes constant time.

Space Complexity:
The space complexity is also O(n), where n is the length of the input string. In the worst case, when all opening parentheses, curly braces, and square brackets are present in the input string, the stack can have a maximum size of n/2 (assuming a balanced input). Therefore, the space required by the stack is proportional to the length of the input string.

Code(can use dict instead of if/else here for concise code):
class Solution(object):
    def isValid(self, s):
        stack = [] # only use append and pop
        pairs = {
            '(': ')',
            '{': '}',
            '[': ']'
        }
        for bracket in s:
            if bracket in pairs:
                stack.append(bracket)
            elif len(stack) == 0 or bracket != pairs[stack.pop()]:
                return False

        return len(stack) == 0

Solution2:
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        brackets = {'(':')', '{':'}','[':']'}

        for c in s:
            if c in brackets:
                stack.append(c)
            elif stack and c == brackets[stack.pop()]:
                continue
            else:
                return False
        
        return not stack
        