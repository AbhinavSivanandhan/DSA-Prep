#Longest Balanced Substring
You are given a binary string s consisting only of zeroes and ones.
A substring is a contiguous sequence of characters within a string.
A substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.

Return the length of the longest balanced substring of s

    def findTheLongestBalancedSubstring(self, s: str) -> int:
        prevChar=''
        zeroCount=0
        oneCount=0
        maxCount=0
        for i in s:
            # print('step ',i)
            if (zeroCount+oneCount)>maxCount and zeroCount==oneCount:
                maxCount=zeroCount+oneCount
            elif zeroCount>oneCount and 2*oneCount>maxCount:
                maxCount=2*oneCount
            elif zeroCount<oneCount and 2*zeroCount>maxCount:
                maxCount=2*zeroCount
            if i=='0' and prevChar=='0':
                zeroCount+=1
            elif i=='1' and prevChar=='0':
                oneCount+=1
                prevChar='1'
            elif i=='1' and prevChar=='1':
                oneCount+=1
            elif i=='0' and prevChar!='0':
                zeroCount=1
                oneCount=0
                prevChar='0'
            # print(zeroCount)
            # print(oneCount)

        if (zeroCount+oneCount)>maxCount and zeroCount==oneCount:
            maxCount=zeroCount+oneCount
        elif zeroCount>oneCount and 2*oneCount>maxCount:
            maxCount=2*oneCount
        elif zeroCount<oneCount and 2*zeroCount>maxCount:
            maxCount=2*zeroCount

        return maxCount
