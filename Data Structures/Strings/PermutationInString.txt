Problem:
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

Hint: Read 'Minimum Window Substring' Problem

Time complexity: O(n)
space complexity: O(k), k is the number of unique characters in string s1(or n)
Solution:
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        s1len=len(s1)
        #two flags below are to check for permutation using dp
        tally1=collections.defaultdict(int)
        total=0
        for i in s1:
            tally1[i]+=1
            total+=1 #total is the same as s1len, so it's redundant
        foundAll=False
        #define start index
        l=0
        curTally=collections.defaultdict(int)#set()#use a counter instead
        curCount=0
        #define sliding window
        for r in range(len(s2)):
            if s2[r] in tally1:
                curTally[s2[r]]+=1
                if curTally[s2[r]]<=tally1[s2[r]]: #condition is so that excess of one char doesnt overload the flag. we just want it to contribute equal to how much is needed
                    curCount+=1
            if curCount==total:
                foundAll=True
            #while loop to increment l and get to minimum position, use below if condition in that
            while foundAll:
                if r-l+1==s1len:
                    print(curTally,s2[l:r+1])
                    return True
                if s2[l] in tally1:
                    curTally[s2[l]]-=1
                    if curTally[s2[l]]<tally1[s2[l]]:
                        curCount-=1
                        foundAll=False
                l+=1
        return False
        