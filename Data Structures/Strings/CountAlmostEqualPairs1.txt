You are given an array nums consisting of positive integers.

We call two integers x and y in this problem almost equal if both integers can become equal after performing the following operation at most once:

Choose either x or y and swap any two digits within the chosen number.
Return the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.

Note that it is allowed for an integer to have leading zeros after performing an operation.

Constraints:

2 <= nums.length <= 100
1 <= nums[i] <= 106

Example 1:

Input: nums = [3,12,30,17,21]

Output: 2

Explanation:

The almost equal pairs of elements are:

3 and 30. By swapping 3 and 0 in 30, you get 3.
12 and 21. By swapping 1 and 2 in 12, you get 21.

Code:
class Solution:
    def countPairs(self, nums: List[int]) -> int:
        result = 0
        # Iterate over all pairs (i, j) where i < j
        for i in range(len(nums) - 1):
            for j in range(i + 1 , len(nums)):
                n1 = str(nums[i])  # Convert the i-th number to a string
                n2 = str(nums[j])  # Convert the j-th number to a string
                
                # Pad the shorter string with leading zeros to make them of equal length
                if len(n1) < len(n2):
                    n1 = '0' * (len(n2) - len(n1)) + n1
                if len(n1) > len(n2):
                    n2 = '0' * (len(n1) - len(n2)) + n2
                
                # Count the number of differing digits between the two strings
                count = 0
                for index in range(len(n2)):
                    if n1[index] != n2[index]:
                        count = count + 1
                
                # Check if the strings have at most 2 differing digits and if they are permutations of each other
                if count <= 2 and sorted(n1) == sorted(n2):
                    result = result + 1
        
        return result
