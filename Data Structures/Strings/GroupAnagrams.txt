Problem:
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Time Complexity: O(N * K * log(K)), where N is the number of strings in the input list strs, and K is the maximum length of any string in strs. The dominant factor is the sorting operation within the loop.

Space Complexity: O(N * K), where N is the number of strings in the input list strs, and K is the maximum length of any string in strs. The space is used to store the sorted strings in the anagrams dictionary.

Solution:
from collections import Counter

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        anagrams = {}
        
        for s in strs:
            # Sort the characters in the string
            sorted_s = ''.join(sorted(s))
            
            if sorted_s not in anagrams:
                anagrams[sorted_s] = [s]
            else:
                anagrams[sorted_s].append(s)
        
        return list(anagrams.values())
