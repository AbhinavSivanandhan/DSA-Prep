Problem:
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

Best solution:
Evaluation:
Time Complexity:
The time complexity of this solution is also O(n), where n is the length of the input string s. Both solutions have a linear time complexity due to the single loop that traverses the string.

Space Complexity:
This solution uses O(1) additional space, as it does not construct a separate string to store the alphanumeric characters. It only uses a constant amount of space for variables (b, l, r). The previous solution, on the other hand, used O(n) additional space to store the filtered string sen.

Conclusion:
Both solutions are valid and have the same time complexity, but the trade-off between them lies in space complexity. The new solution uses less additional space (O(1)), 

Code:
class Solution:
    def isPalindrome(self, s: str) -> bool:
        b=s.lower()
        l=0
        r=len(b)-1
        while l<r:
            if not b[l].isalnum():
                l+=1
            if not b[r].isalnum():
                r-=1
            if b[r].isalnum() and b[l].isalnum():
                if b[l]!=b[r]:
                    return False
                r -=1
                l+=1
        return True
        

Old simple Solution1:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = [char.lower() for char in s if char.isalnum()]
        return s == s[::-1]
        
Old simple Solution 2:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        ptr1, ptr2 = 0, len(s)-1
        while ptr1 < ptr2:
            while ptr1 < ptr2 and not s[ptr1].isalnum():
                ptr1 += 1
            while ptr1 < ptr2 and not s[ptr2].isalnum():
                ptr2 -= 1
            
            if s[ptr1].lower() != s[ptr2].lower():
                return False
            ptr1 += 1
            ptr2 -= 1
        return True

Overall decent solution:
Time Complexity:
The primary operations in the method are the iteration through each character of the input string and the comparison of the string with its reverse. Both of these operations take O(n) time, where n is the length of the input string s. Therefore, the overall time complexity is O(n).

Space Complexity:
The space complexity is determined by the additional space used during the execution of the method. In this case, the significant space usage comes from the sen string, which stores the alphanumeric characters of the input string.

Input Space: O(n) - The space required to store the input string.

Auxiliary Space: O(n) - The additional space used by the sen string. In the worst case, when all characters are alphanumeric, sen can have the same length as the input string.

Therefore, the overall space complexity is O(n), where n is the length of the input string s.
class Solution:
    def isPalindrome(self, s: str) -> bool:
        sen = ""
        for c in s:
            if c.isalnum():
                sen += c
        sen = sen.lower()
        return sen == sen[::-1]