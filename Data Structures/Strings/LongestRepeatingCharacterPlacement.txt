Problem:
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Solution:
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        
        l = 0
        maxf = 0
        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0)
            maxf = max(maxf, count[s[r]])

            if (r - l + 1) - maxf > k:
                count[s[l]] -= 1
                l += 1

        return (r - l + 1)

Brute force:
from collections import Counter
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        def validRepString(i,j):
            d=Counter(s[i:j+1])
            repeatingChar=max(zip(d.values(),d.keys()))[1]
            del d[repeatingChar]
            count=0
            for key in d:
                count+=d[key]
            if count<=k:
                return True
            else:
                return False
        i=0
        result=0
        for j in range(0,len(s)):
            while not validRepString(i,j):
              i+=1
            result=max(result,len(s[i:j+1]))
        return result
        