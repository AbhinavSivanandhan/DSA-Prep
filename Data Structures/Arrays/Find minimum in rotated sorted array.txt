Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Simple and optimal+intuitive solution:


Optimal Solution:
class Solution:
    def findMin(self, nums: List[int]) -> int:
        start = 0
        end = len(nums) - 1
        
        while start<end:
            mid = (start+end)//2
            if nums[mid]>nums[end]:
                start = mid+1
            else:
                end=mid
            
        return nums[start]  

Detailed Expanation of above code:
class Solution:
    def findMin(self, nums: List[int]) -> int:
        start = 0
        end = len(nums) - 1
        minv = float('inf')  # To track the minimum value found so far
        print(f"Initial Array: {nums}")
        print(f"Initial Start: {start}, End: {end}, Mid: Not yet calculated\n")

        while mid <= end:  # Loop continues as long as start <= end
            mid = (start + end) // 2
            print(f"Start: {start}, Mid: {mid}, End: {end}")
            print(f"nums[start]: {nums[start]}, nums[mid]: {nums[mid]}, nums[end]: {nums[end]}")

            # Update the minimum value
            minv = min(minv, nums[mid])
            print(f"Updated minimum so far: {minv}")

            # Decide which side to search next
            if nums[mid] > nums[end]:  # Minimum must be in the right half
                print(f"nums[mid] > nums[end]: Minimum must be in the right half.")
                start = mid + 1
                print(f"Updating Start to {start}\n")
            else:  # Minimum must be in the left half or mid itself
                print(f"nums[mid] <= nums[end]: Minimum must be in the left half or mid itself.")
                end = mid - 1
                print(f"Updating End to {end}\n")

        print(f"Final Start: {start}, End: {end} (Loop ends because start > end)")
        print(f"Final minimum value: {minv}")
        return minv
