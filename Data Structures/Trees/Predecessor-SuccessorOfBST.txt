predecessor & successor:
https://www.geeksforgeeks.org/inorder-predecessor-successor-given-key-bst/
# Python program to find predecessor and successor in a BST

# A BST node
class Node:

	# Constructor to create a new node
	def __init__(self, key):
		self.key = key
		self.left = None
		self.right = None

# This function finds predecessor and successor of key in BST
# It sets pre and suc as predecessor and successor respectively
def findPreSuc(root, key):

	# Base Case
	if root is None:
		return

	# If key is present at root
	if root.key == key:

		# the maximum value in left subtree is predecessor
		if root.left is not None:
			tmp = root.left 
			while(tmp.right):
				tmp = tmp.right 
			findPreSuc.pre = tmp


		# the minimum value in right subtree is successor
		if root.right is not None:
			tmp = root.right
			while(tmp.left):
				tmp = tmp.left 
			findPreSuc.suc = tmp 

		return

	# If key is smaller than root's key, go to left subtree
	if root.key > key :
		findPreSuc.suc = root 
		findPreSuc(root.left, key)

	else: # go to right subtree
		findPreSuc.pre = root
		findPreSuc(root.right, key)

# A utility function to insert a new node in with given key in BST
def insert(node , key):
	if node is None:
		return Node(key)

	if key < node.key:
		node.left = insert(node.left, key)

	else:
		node.right = insert(node.right, key)

	return node


# Driver program to test above function
key = 65 #Key to be searched in BST

""" Let us create following BST
			50
		/	 \
		30	 70
		/ \ / \
	20 40 60 80 
"""
root = None
root = insert(root, 50)
insert(root, 30);
insert(root, 20);
insert(root, 40);
insert(root, 70);
insert(root, 60);
insert(root, 80);

# Static variables of the function findPreSuc 
findPreSuc.pre = None
findPreSuc.suc = None

findPreSuc(root, key)

if findPreSuc.pre is not None:
	print "Predecessor is", findPreSuc.pre.key

else:
	print "No Predecessor"

if findPreSuc.suc is not None:
	print "Successor is", findPreSuc.suc.key
else:
	print "No Successor"

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)


successor of bst/inorder successor of bst

https://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree/
3 solutions in the link

we look at solution where every node has parent pointer
solution1:
# Python program to find the inorder successor in a BST

# A binary tree node 
class Node:

	# Constructor to create a new node
	def __init__(self, key):
		self.data = key 
		self.left = None
		self.right = None

def inOrderSuccessor(n):
	
	# Step 1 of the above algorithm
	if n.right is not None:
		return minValue(n.right)

	# Step 2 of the above algorithm
	p = n.parent
	while( p is not None):
		if n != p.right :
			break
		n = p 
		p = p.parent
	return p

# Given a non-empty binary search tree, return the 
# minimum data value found in that tree. Note that the
# entire tree doesn't need to be searched
def minValue(node):
	current = node

	# loop down to find the leftmost leaf
	while(current is not None):
		if current.left is None:
			break
		current = current.left

	return current


# Given a binary search tree and a number, inserts a
# new node with the given number in the correct place
# in the tree. Returns the new root pointer which the
# caller should then use( the standard trick to avoid 
# using reference parameters)
def insert( node, data):

	# 1) If tree is empty then return a new singly node
	if node is None:
		return Node(data)
	else:
		
		# 2) Otherwise, recur down the tree
		if data <= node.data:
			temp = insert(node.left, data)
			node.left = temp 
			temp.parent = node
		else:
			temp = insert(node.right, data)
			node.right = temp 
			temp.parent = node
		
		# return the unchanged node pointer
		return node


# Driver program to test above function

root = None

# Creating the tree given in the above diagram 
root = insert(root, 20)
root = insert(root, 8);
root = insert(root, 22);
root = insert(root, 4);
root = insert(root, 12);
root = insert(root, 10); 
root = insert(root, 14); 
temp = root.left.right.right 

succ = inOrderSuccessor(temp)
if succ is not None:
	print ("\nInorder Successor of % d is % d "%(temp.data, succ.data))
else:
	print ("\nInorder Successor doesn't exist")

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)


Solution2:
# Python program for above approach

''' A binary tree node has data, 
the pointer to left child
and a pointer to right child '''
class Node :
	def __init__(self,data):
		self.data = data
		self.left = None
		self.right = None
		self.parent = None
	
def inOrderTraversal(root, n, succ):
	if(root == None): return
	inOrderTraversal(root.left, n, succ) 
	if(root.data > n.data and not succ.left): 
		succ.left = root
		return
	inOrderTraversal(root.right, n, succ)	 

def inOrderSuccessor(root, n):
	succ = Node(0) 
	inOrderTraversal(root, n, succ) 
	return succ.left 

# Give a binary search tree and a 
# number, inserts a new node with
# the given number in the correct 
# place in the tree. Returns the new
# root pointer which the caller should
# then use (the standard trick to 
# avoid using reference parameters). 
def insert(node, data):
	# 1. If the tree is empty, return a new,
	# single node 
	if (node == None):
		return Node(data)
	else:
	# 2. Otherwise, recur down the tree 
		if (data <= node.data):
			temp = insert(node.left, data) 
			node.left = temp 
			temp.parent = node 
		else:
			temp = insert(node.right, data)
			node.right = temp 
			temp.parent = node 

		# Return the (unchanged) node pointer 
		return node 

# Driver code
root = None

# Creating the tree given in the above diagram
root = insert(root, 20) 
root = insert(root, 8) 
root = insert(root, 22) 
root = insert(root, 4) 
root = insert(root, 12) 
root = insert(root, 10) 
root = insert(root, 14) 
temp = root.left.right.right 

# Function Call
succ = inOrderSuccessor(root, temp) 
if (succ != None): print("Inorder Successor of",temp.data,"is",succ.data)
else: print("Inorder Successor doesn't exist")
