A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

my optimal solution1:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.d={}
        self.result=float('-inf')
    def traverse(self,root):
        if root:
            self.traverse(root.left)
            self.result=max(self.result,max(self.maxDepth(root.left),0)+root.val+max(self.maxDepth(root.right),0))
            self.traverse(root.right)
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if root:
            if root in self.d:
                return self.d[root]
            self.d[root]=root.val+max(self.maxDepth(root.left),0,self.maxDepth(root.right))
            return self.d[root]
        return 0
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        self.traverse(root)
        return self.result

optimal solution 2:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        res = [root.val]

        # return max path sum without split
        def dfs(root):
            if not root:
                return 0

            leftMax = dfs(root.left)
            rightMax = dfs(root.right)
            leftMax = max(leftMax, 0)
            rightMax = max(rightMax, 0)

            # compute max path sum WITH split
            res[0] = max(res[0], root.val + leftMax + rightMax)
            return root.val + max(leftMax, rightMax)

        dfs(root)
        return res[0]
