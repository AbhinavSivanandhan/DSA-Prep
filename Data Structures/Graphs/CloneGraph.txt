Problem:
Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}

https://leetcode.com/problems/clone-graph/solutions/3392355/python-short-and-clean-recursive-dfs/

Solution:

"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""
Solution 1:
"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        oldToNew = {}
        def dfs(node):
            if node in oldToNew:
                return oldToNew[node]
            copy = Node(node.val)
            oldToNew[node] = copy
            for nei in node.neighbors:
                copy.neighbors.append(dfs(nei))
            return copy
        
        return dfs(node) if node else None

Solution 2:
class Solution:
    def cloneGraph(self, node_: 'Node') -> 'Node':
        copies = {None: None}

        def deep_copy(node: 'Node') -> 'Node':
            if node in copies: return copies[node]
            copies[node] = c_node = Node(node.val)
            c_node.neighbors = list(map(deep_copy, node.neighbors))
            return c_node
        
        return deep_copy(node_)
