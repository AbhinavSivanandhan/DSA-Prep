Number of Islands

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Solution:
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ROWS, COLS = len(grid), len(grid[0])
        island = set() #if visited nodes constitute an island, add them all
        visit = set() #visit nodes adjacent to the one we have 'seen'
        count=0
        def dfs(r, c, visit):
            if ((r,c) in visit or r<0 or c<0 or r==ROWS or c == COLS or grid[r][c]=="0" or (r,c) in island): #(r,c in island is redundant)
                return
            visit.add((r,c))
            dfs(r+1, c, visit)
            dfs(r-1, c, visit)
            dfs(r, c+1, visit)
            dfs(r, c-1, visit)
        for r in range(ROWS):
            for c in range(COLS):
                if grid[r][c]=="1" and (r,c) not in island:
                    count+=1
                    dfs(r,c,visit)
                    island.update(visit)

        return count