Number of Provinces
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.
Code1 (using given matrix):
class Solution(object):
    def findCircleNum(self, M):
        n = len(M)  
        visited = [False]*n 
        count = 0  
        
        if not M:  
            return 0  
        
        def dfs(u):  
            for v in range(n): 
                if M[u][v] == 1 and visited[v] == False:  
                    visited[v] = True  
                    dfs(v)  
        
        
        for idx in range(n): 
            if visited[idx] == False: 
                count += 1 
                visited[idx] == True 
                dfs(idx) 
        
        return count 
        
Code2(create a Adjacency List):
from collections import defaultdict

class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        count, N=0, len(isConnected)
        visited = [False for i in range(N)]
        #create adjacency list
        adjList=defaultdict(set)
        for i in range(0, N): 
            for j in range(i+1, N):#traverse only triangle, no need full matrix
                if isConnected[i][j]==1:
                  adjList[i].add(j)
                  adjList[j].add(i)
        print(adjList)
        def dfs(neighbours):
            for v in neighbours:
                if visited[v]!=True:
                    visited[v]=True
                    dfs(adjList[v])
        for i in range(0,N): 
            if not visited[i]:
                visited[i]=True
                count+=1
                dfs(adjList[i])
        return count
