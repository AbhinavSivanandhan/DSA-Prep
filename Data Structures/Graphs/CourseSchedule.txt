Problem:
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

DFS's algorithm(topological sort)

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        preMap = {i:[] for i in range(numCourses)}
        for crs, pre in prerequisites:
            preMap[crs].append(pre)
        
        visitSet=set()
        def dfs(crs):
            if crs in visitSet:
                return False
            if preMap[crs] == []:
                return True
            visitSet.add(crs)
            for pre in preMap[crs]: #this part of problem is the main logic. essentially a loop schecker
                if not dfs[pre]:
                    return False
            visitSet.remove(crs)
            preMap[crs] = [] #done with checking for prereqs of this adj list node so remove it so that we don't check again. like striking off in a checklist
            return True
        
        for crs in range(numCourses):
            if not dfs(crs):
                return False
        return True
