https://colab.research.google.com/drive/1rvuzelB3r3xHkmy1k1i7x_L1gUXCl72C#scrollTo=ut1WuQa1ZJjN
https://chatgpt.com/c/3e4d71f5-b6d4-405c-b261-2759e264681a
https://static.us.edusercontent.com/files/aNwlpVzoNeVhcG90SXmpMjcO
import heapq

def dijkstra(graph, start):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    priority_queue = [(0, start)]
    previous_vertices = {vertex: None for vertex in graph}

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_vertices[neighbor] = current_vertex
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances, previous_vertices

# Example graph as an adjacency list
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Running Dijkstra's algorithm on the example graph
distances, previous_vertices = dijkstra(graph, 'A')
