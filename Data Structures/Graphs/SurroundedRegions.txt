Problem:
You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:

Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
A surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.

Code:
from typing import List

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        
        if not board or not board[0]:
            return
        
        M, N = len(board), len(board[0])
        
        def flood_fill(x: int, y: int):
            if x < 0 or x >= M or y < 0 or y >= N or board[x][y] != 'O':
                return
            board[x][y] = 'S'  # Temporarily mark as 'Safe'
            # Flood fill in all 4 directions
            flood_fill(x + 1, y)
            flood_fill(x - 1, y)
            flood_fill(x, y + 1)
            flood_fill(x, y - 1)
        
        # Step 1: Mark all 'O's connected to the border
        for i in range(M):
            if board[i][0] == 'O':
                flood_fill(i, 0)
            if board[i][N - 1] == 'O':
                flood_fill(i, N - 1)
        
        for j in range(N):
            if board[0][j] == 'O':
                flood_fill(0, j)
            if board[M - 1][j] == 'O':
                flood_fill(M - 1, j)
        
        # Step 2: Replace all remaining 'O's with 'X'
        for i in range(M):
            for j in range(N):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
        
        # Step 3: Restore the temporarily marked 'S' back to 'O'
        for i in range(M):
            for j in range(N):
                if board[i][j] == 'S':
                    board[i][j] = 'O'
