Problem statement is confusing but basically

[0 2                             [1 2.                                   [2 2                     [3 3

1 3] is starting array.  1  3] is array at time 1.     2 3] at time 2.    3 3] at time 3

(at each time t, depth becomes minimum t everywhere, so we need to ensure flow is possible (only if less than or equal to, so we wait till they’re equal to postion 1,1 where water needs to flow)

## **Problem Intuition:**

You’re given a grid with elevation values. Think of it like a landscape where each cell has a "height."

- At time `t`, the water level is `t`.
- You can swim into a cell **only if the water level `t` is at least as high as the elevation** of that cell (i.e., you can’t enter until it’s submerged).
- You can swim **up/down/left/right**, but not diagonally.
- You start at `(0,0)`, and want to reach `(n-1,n-1)` **as early as possible**.

We use greedy approach, modified approach of Dijkstra’s algorithm. it uses BFS with queue(but we use priority queue/minheap) and take nodes that we add to our frontier to this(Neetcode talks about frontier in other graph problems too, learn this pattern+heap approach). add value of cell and it’s index r,c to frontier/heap node. (maxheight/time, r, c) is stored in heap where the key heap uses to heapify is maxheight/time

![image.png](attachment:3926b5a5-c2f6-4881-b031-667179b4d8f8:image.png)

we want to choose dijkstras path to find path with smallest max height(instead of its purpose to minimise max weights of branches). so we choose bottom path instead of the top path through 3.

![image.png](attachment:68fced1a-0526-4897-825d-9e44643694cb:image.png)

basically we track the max value we went through to get to the position, not the weight/value of position itself. eg: to get to 1, we went through 3. so we add 3 (max(3,1)). so no need to even check every path, just paths where max height is minimised.

![image.png](attachment:7089116e-aae2-4192-bd1d-f84939c3d14e:image.png)

initialise first node in minheap as starting cell index and value

**Dijkstra's Algorithm**

**Time complexity: O(n^2*log⁡n)**

**Space complexity: O(n^2)**

```python
class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        N = len(grid)
        visit = set()
        minH = [[grid[0][0], 0, 0]]  # (time/max-height, r, c)
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]

        visit.add((0, 0))
        while minH:
            t, r, c = heapq.heappop(minH)
            if r == N - 1 and c == N - 1:
                return t
            for dr, dc in directions:
                neiR, neiC = r + dr, c + dc
                if (neiR < 0 or neiC < 0 or
                    neiR == N or neiC == N or
                    (neiR, neiC) in visit
                ):
                    continue
                visit.add((neiR, neiC))
                heapq.heappush(minH, [max(t, grid[neiR][neiC]), neiR, neiC])
```
