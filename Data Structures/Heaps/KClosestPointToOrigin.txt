**Min Heap Solution**

**Time complexity: O(k∗log⁡n)**

**Space complexity: O(n)**

```python
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        minHeap = []
        for x, y in points:
            dist = (x ** 2) + (y ** 2)
            minHeap.append([dist, x, y])
        
        heapq.heapify(minHeap)
        res = []
        while k > 0:
            dist, x, y = heapq.heappop(minHeap)
            res.append([x, y])
            k -= 1
            
        return res
```

**Max Heap Solution**

**Time complexity: O(n∗log⁡k)**

**Space complexity: O(k)**

```python
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        maxHeap = []
        for x, y in points:
            dist = -(x ** 2 + y ** 2)
            heapq.heappush(maxHeap, [dist, x, y])
            if len(maxHeap) > k:
                heapq.heappop(maxHeap)
        
        res = []
        while maxHeap:
            dist, x, y = heapq.heappop(maxHeap)
            res.append([x, y])
        return res
```

## **Key Differences**

| Approach | **Min-Heap (`heapq.heapify()`)** | **Max-Heap (`heappush()` with `-dist`)** |
| --- | --- | --- |
| **Heap Type** | **Stores all `n` elements, then extracts `k`** | **Maintains a heap of size `k` while processing** |
| **Heap Size** | **O(n) (stores all points initially)** | **O(k) (stores only `k` closest points)** |
| **Time Complexity** | **O(k log n)** (extracting `k` elements) | **O(n log k)** (pushing `n` elements, maintaining heap size `k`) |
| **Space Complexity** | **O(n)** (stores all elements) | **O(k)** (stores only `k` elements) |
| **Best When** | `n` is small; `heapify()` is efficient | `k` is small compared to `n`; avoids storing unnecessary elements |