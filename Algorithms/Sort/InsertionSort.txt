Insertion sort:

def insertion_sort(arr):
    # Traverse through 1 to len(arr)
    for i in range(1, len(arr)):
        key = arr[i]
        # Move elements of arr[0..i-1], that are greater than key,
        # to one position ahead of their current position
        j = i-1
        while j >=0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr


ref: https://www.geeksforgeeks.org/insertion-sort/

Time Complexity
The time complexity of Insertion Sort is 
�
(
�
2
)
O(n 
2
 ) in the worst case, when the array is reverse sorted, and 
�
(
�
)
O(n) in the best case, when the array is already sorted. This makes it suitable for small data sets or as the final finishing-off algorithm for more advanced sort methods.

Space Complexity
The space complexity of Insertion Sort is 
�
(
1
)
O(1), as it only requires a single additional memory space for the key element being inserted. This is one of the reasons it is considered an in-place sorting algorithm.