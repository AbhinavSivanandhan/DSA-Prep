Heap sort

# To heapify subtree rooted at index i.
# n is size of heap
 
 
def heapify(arr, N, i):
    largest = i  # Initialize largest as root
    l = 2 * i + 1     # left = 2*i + 1
    r = 2 * i + 2     # right = 2*i + 2
 
    # See if left child of root exists and is
    # greater than root
    if l < N and arr[largest] < arr[l]:
        largest = l
 
    # See if right child of root exists and is
    # greater than root
    if r < N and arr[largest] < arr[r]:
        largest = r
 
    # Change root, if needed
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # swap
 
        # Heapify the root.
        heapify(arr, N, largest)
 
# The main function to sort an array of given size
 
 
def heapSort(arr):
    N = len(arr)
 
    # Build a maxheap.
    for i in range(N//2 - 1, -1, -1):
        heapify(arr, N, i)
 
    # One by one extract elements
    for i in range(N-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # swap
        heapify(arr, i, 0)
 
 
# Driver's code
if __name__ == '__main__':
    arr = [12, 11, 13, 5, 6, 7]
 
    # Function call
    heapSort(arr)
    N = len(arr)
 
    print("Sorted array is")
    for i in range(N):
        print("%d" % arr[i], end=" ")

https://www.geeksforgeeks.org/heap-sort/

Time Complexity
Building the Max Heap: The process of building a Max Heap from an unsorted array has a time complexity of 
�
(
�
)
O(n). This is because the method to build the heap works bottom-up, calling heapify for each non-leaf node, which has a tighter bound than 
�
(
�
log
⁡
�
)
O(nlogn) due to the way the tree heights increase as you move up the heap.

Heapify Function: The heapify function, which ensures the heap property is maintained, has a time complexity of 
�
(
log
⁡
�
)
O(logn) for any given node because it works its way down the heap, and the height of the heap is 
log
⁡
�
logn.

Extracting Elements from the Heap: In the worst-case scenario, for each of the 
�
−
1
n−1 extractions (ignoring the last element since it's already in place), the cost of extracting the maximum element (or minimum, depending on the heap type) and then restoring the heap property using heapify is 
�
(
log
⁡
�
)
O(logn).

Given these considerations, the overall worst-case time complexity of HeapSort is:

Worst Case: 
�
(
�
log
⁡
�
)
O(nlogn)
This accounts for building the heap initially in 
�
(
�
)
O(n) and then performing 
�
−
1
n−1 heapify operations, each of which could take up to 
�
(
log
⁡
�
)
O(logn) time.

Space Complexity
The HeapSort algorithm operates in-place on the array, meaning it does not require any additional storage proportional to the size of the input array. The space needed is for maintaining the call stack of the heapify recursive calls, which in the worst case could go up to 
�
(
log
⁡
�
)
O(logn) due to the height of the heap. However, for the analysis of sorting algorithms, we usually consider auxiliary space complexity, which is:

Space Complexity: 
�
(
1
)
O(1)
This denotes that HeapSort does not need extra space besides the input array and a small, constant amount of extra storage space for variables used in the algorithm itself.

In summary, HeapSort provides a reliable 
�
(
�
log
⁡
�
)
O(nlogn) sorting time complexity, making it an efficient choice for sorting large datasets, with the added benefit of not requiring any extra space beyond what is needed to store the original array.