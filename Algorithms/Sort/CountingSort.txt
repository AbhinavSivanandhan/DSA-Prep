https://www.hackerrank.com/challenges/one-month-preparation-kit-countingsort1/problem

ref: the opposite of what he explains, as we can subtract too if needed, just see logic
https://www.youtube.com/watch?v=OKd534EWcdk&ab_channel=CSDojo

Geeks: code and explanation
https://www.geeksforgeeks.org/counting-sort/

Counting sort is a stable sorting algorithm as it preserves ordering(note that there aren't any comparisons done. just counting.)
Code:
def count_sort(input_array):
	# Finding the maximum element of input_array.
	M = max(input_array)

	# Initializing count_array with 0
	count_array = [0] * (M + 1)

	# Mapping each element of input_array as an index of count_array
	for num in input_array:
		count_array[num] += 1

	# Calculating prefix sum at every index of count_array
	for i in range(1, M + 1):
		count_array[i] += count_array[i - 1]

	# Creating output_array from count_array
	output_array = [0] * len(input_array)

	for i in range(len(input_array) - 1, -1, -1):
		output_array[count_array[input_array[i]] - 1] = input_array[i]
		count_array[input_array[i]] -= 1

	return output_array

# Driver code
if __name__ == "__main__":
	# Input array
	input_array = [4, 3, 12, 1, 5, 5, 3, 9]

	# Output array
	output_array = count_sort(input_array)

	for num in output_array:
		print(num, end=" ")

Time Complexity: O(N+M)
Auxiliary Space: O(N+M)