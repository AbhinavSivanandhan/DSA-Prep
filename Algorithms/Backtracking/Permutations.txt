Find Permutations

TC O(n!)
SC O(n. n!)
Solution:
from typing import List

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []

        # Base case: if the list has only one element, return it as the only permutation.
        if len(nums) == 1:
            print(f"Base case reached with nums: {nums[:]}")
            return [nums[:]]  # nums[:] is a shallow copy
        
        print(f"Calling permute with nums: {nums}")
        
        # Iterate over the elements of nums (IMPORTANT to understand this line)
        for i in range(len(nums)):
            n = nums.pop(0)  # Remove the first element
            print(f"Removed {n} from nums, now nums is: {nums}")

            # Recursive call to generate permutations of the remaining list
            perms = self.permute(nums)
            print(f"Permutations of {nums} are: {perms}")

            # Append the removed element `n` to each permutation obtained
            for perm in perms:
                perm.append(n)
                print(f"Added {n} back to perm, now perm is: {perm}")

            # Add all the new permutations to the result list
            res.extend(perms)
            print(f"Extended result with perms, now res is: {res}")

            # Backtrack: append the removed element `n` back to nums
            nums.append(n)
            print(f"Backtracked by adding {n} back to nums, now nums is: {nums}")

        return res
obj=Solution()
print(obj.permute([1,2,3]))
