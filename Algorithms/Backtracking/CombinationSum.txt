Problem:
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
Code1:
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []

        def dfs(i, cur, total):
            if total == target:
                res.append(cur.copy())
                return
            if i >= len(candidates) or total > target:
                return

            cur.append(candidates[i])
            dfs(i, cur, total + candidates[i])
            cur.pop()
            dfs(i + 1, cur, total)

        dfs(0, [], 0)
        return res


My Solution(similar to neetcode solution in terms of time and space complexity but slightly inefficient, slighlty messier code, and also if they ask for combinations in same order as it was given, then my code will fail. sort and the break statement solve it for me):
class Solution:
    def __init__(self):
        self.results=set()
    def combinationSumHelper(self, candidates, target, result):
        if target==0:
            self.results.add(tuple(result))
        elif len(candidates)==0:
            return
        else:
            result1=result[:]
            result2=result[:]
            for i in range(len(candidates)):
                if candidates[i]<=target:
                    result1.append(candidates[i])
                    #do nothing for result2
                    self.combinationSumHelper(candidates[i:],target-candidates[i],result1)#use current candidate and repeat
                    self.combinationSumHelper(candidates[i+1:],target,result2)#skip
                break
        

    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        self.combinationSumHelper(candidates,target,[])
        return [list(lst_tuple) for lst_tuple in self.results]
