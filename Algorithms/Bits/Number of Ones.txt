Question:
Number of 1 Bits

Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.

Answer:
This is a slighlty slighlty tricky problem because when you try any operation on it directly, argument is considered in decimal form, Eg: binary number 1011 has 3 1's, but it is taken in decimal format as number 11, and returns answer as two 1's.

Optimal answer:
https://www.youtube.com/watch?v=5Km3utixwZs
see 7:30 min & 8:43
basically removes 1 from n, and ANDs it with n. this gets rid of 1 bit. and counts it. this way it only looks at 1 bits, and when we remove both 1 bits, it becomes 0, while n loops ends
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            n &= n - 1
            res += 1
        return res

Answer 2:(easy)
class Solution:
    def hammingWeight(self, n: int) -> int:
        return sum(1 for i in str(bin(n)) if i == '1')

Answer 3:
class Solution:
    def hammingWeight(self, n: int) -> int:
        count = 0
        while n:
            if n & 1: count += 1
            n = n >> 1
        return count

Answer 4:(easy), same as previous answer, except instead of ANDing, we are MODding
class Solution:
    def hammingWeight(self, n: int) -> int: #Time complexity O(1). i.e., 32 operations since 32 bits
        count = 0 
        while n: #while n > 0
            res += n%2
            n = n >>2 #can also divide by 2 but this is more efficient
        return count
