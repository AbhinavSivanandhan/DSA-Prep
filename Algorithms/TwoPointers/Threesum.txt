Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Optimal solution(Neetcode):
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        for i, a in enumerate(nums):
            # Skip positive integers
            if a > 0:
                break
            #skip duplicates, i>0 condition is just to avoid indexerror due to i-1
            if i > 0 and a == nums[i - 1]:
                continue

            l, r = i + 1, len(nums) - 1 # basically the same as for loop i,j type comparison except that we start after 'a'
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0: #with this, instead of n^2 search like we do for for loops, we do n search
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]]) #this strategy has avoided duplicates
                    l += 1
                    r -= 1
                    while nums[l] == nums[l - 1] and l < r: #skips duplicates and ensures each triplet is added only once
                        l += 1
                        
        return res


My solution:
class Solution(object):
    def threeSum(self, nums):
        numsd = {value:index for index, value in enumerate(nums)}
        result=[]
        for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                key = -1*(nums[i]+nums[j])
                if key in numsd and numsd[key] not in [i,j]:
                    triplet = [nums[i],nums[j],key]
                    triplet.sort()
                    result.append(tuple(triplet))
        return list(set(result))

note that this works and doesn't fail the scenario where index value matches with i, because it store only the latest value in the array in numsd in that first for loop.
so basically earlier duplicate value of triplet will not have its index in numsd and so trilplet will get added. remember that we take the same triplet in consideration multiple times when we have duplicates, so it is fine if it considers it a valid triplet only once in all those considerations

TLE error:
class Solution(object):
    def threeSum(self, nums):
        from collections import defaultdict
        
        # Dictionary to store all indices for each value
        numsd = defaultdict(list)
        for index, value in enumerate(nums):
            numsd[value].append(index)
        
        result = set()
        
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):
                key = -(nums[i] + nums[j])
                if key in numsd:
                    # Check all indices where key occurs
                    for k in numsd[key]:
                        if k != i and k != j:
                            triplet = [nums[i], nums[j], key]
                            triplet.sort()
                            result.add(tuple(triplet))
        
        return [list(triplet) for triplet in result]

cleaner solution:
def threeSum(self, nums: List[int]) -> List[List[int]]:

	res = set()

	#1. Split nums into three lists: negative numbers, positive numbers, and zeros
	n, p, z = [], [], []
	for num in nums:
		if num > 0:
			p.append(num)
		elif num < 0: 
			n.append(num)
		else:
			z.append(num)

	#2. Create a separate set for negatives and positives for O(1) look-up times
	N, P = set(n), set(p)

	#3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P
	#   i.e. (-3, 0, 3) = 0
	if z:
		for num in P:
			if -1*num in N:
				res.add((-1*num, 0, num))

	#3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0
	if len(z) >= 3:
		res.add((0,0,0))

	#4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)
	#   exists in the positive number set
	for i in range(len(n)):
		for j in range(i+1,len(n)):
			target = -1*(n[i]+n[j])
			if target in P:
				res.add(tuple(sorted([n[i],n[j],target])))

	#5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)
	#   exists in the negative number set
	for i in range(len(p)):
		for j in range(i+1,len(p)):
			target = -1*(p[i]+p[j])
			if target in N:
				res.add(tuple(sorted([p[i],p[j],target])))

	return res
