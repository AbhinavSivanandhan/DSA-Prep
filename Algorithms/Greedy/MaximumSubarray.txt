Given an integer array nums, find the subarray with the largest sum, and return its sum.
**Kadane’s algorithm**

**Time complexity: O(n)**

**Space complexity: O(1)**
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        sum=nums[0]
        maxSum=sum
        for i in range(1,len(nums)):
            sum=max(sum,0)
            sum+=nums[i]
            maxSum=max(maxSum,sum)
        return maxSum

**Dynamic Programming Approach(not as optimal as Kadane’s)(easy and second most intuitive):**

**Time complexity: O(n)**

**Space complexity: O(n)**

class Solution:
    def maxSubArray(self, nums):
        dp = [*nums]
        for i in range(1, len(nums)):
            dp[i] = max(nums[i], nums[i] + dp[i - 1])
        return max(dp)

Note: [*nums] is same as nums.copy()
