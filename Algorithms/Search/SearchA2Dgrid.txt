Search a 2d sorted grid to see if target exists:
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


code(binary search):
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def findRow():
            startX, startY= 0, 0
            endX, endY = len(matrix)-1, len(matrix[0])-1
            while startX<=endX:
                midX = (startX+endX)//2
                if matrix[midX][0]<=target and target<=matrix[midX][endY]:
                    return midX
                elif matrix[midX][0]>target:
                    endX=midX-1
                else:
                    startX=midX+1
            return -1
        def binarySearch(ROW):
            start=0
            end=len(matrix[0])-1
            while start<=end:
                mid=(start+end)//2
                if matrix[ROW][mid]==target:
                    return mid
                elif matrix[ROW][mid]>target:
                    end=mid-1
                else:
                    start=mid+1
            return -1

        #first find row, then binary search in row to find num
        ROW=findRow()
        if ROW==-1:
            return False    

        COL=binarySearch(ROW)
        if COL==-1:
            return False    
        return True


