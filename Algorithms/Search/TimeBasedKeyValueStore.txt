Notes:
should find closest time stamp closest( less than or equal to) the value in get request

insertion sort the values array by timestamp, then binary search for get(so worst case TC is logn). although problem constraint assures the sorting is not necessary due to leetcode constraint (problem specific assumption!)

**Binary Search (Array)**

**Time complexity: O(1) for set() and O(log⁡n) for get().**

**Space complexity: O(m∗n)**

Where n is the total number of values associated with a key and m is the total number of keys.

class TimeMap:

    def __init__(self):
        self.keyStore = {}  # key : list of [val, timestamp]

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.keyStore:
            self.keyStore[key] = []
        self.keyStore[key].append([value, timestamp])

    def get(self, key: str, timestamp: int) -> str:
        res, values = "", self.keyStore.get(key, [])
        #binary search
        l, r = 0, len(values) - 1
        while l <= r:
            m = (l + r) // 2
            if values[m][1] <= timestamp:
                res = values[m][0]
                l = m + 1
            else:
                r = m - 1
        return res
