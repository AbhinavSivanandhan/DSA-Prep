Hashset solution(intuitive):

**Time complexity: O(log⁡n)**

**Space complexity: O(log⁡n)**

```python
class Solution:
    def isHappy(self, n: int) -> bool:
        visit=set()
        def sqsum(num):
            visit.add(num)
            sum=0
            while num:
                sum+=(num%10)**2
                num=num//10
            
            return sum
        while n!=1 and n not in visit:
            n=sqsum(n)
        return True if n==1 else False
```

Fast and Slow Pointer:

**Time complexity: O(log⁡n)**

**Space complexity: O(1)**

```python
class Solution:
    def isHappy(self, n: int) -> bool:
        slow, fast = n, self.sumOfSquares(n)

        while slow != fast:
            fast = self.sumOfSquares(fast)
            fast = self.sumOfSquares(fast)#twice to be fast
            slow = self.sumOfSquares(slow)
        return True if fast == 1 else False
    
    def sumOfSquares(self, n: int) -> int:
        output = 0

        while n:
            digit = n % 10
            digit = digit ** 2
            output += digit
            n = n // 10
        return output
```