class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        dp = {}  # (index, total) -> # of ways

        def backtrack(i, total):
            if i == len(nums):
                return 1 if total == target else 0
            if (i, total) in dp:
                return dp[(i, total)]

            dp[(i, total)] = (backtrack(i + 1, total + nums[i]) +
                              backtrack(i + 1, total - nums[i]))
            return dp[(i, total)]

        return backtrack(0, 0)

**Time complexity: O(n∗m)**

**Space complexity: O(n∗m)**

Where n is the length of the array nums and m is the sum of all the elements in the array.


✅ **Fantastic question! Let’s build this solution from scratch, starting from brute force → to memoized DP → with recurrence + base case clearly explained.**

---

## 🌟 **Problem recap**

👉 You’re given `nums` — pick + or - for each number

👉 Goal: count how many ways sum = `target`

---

## 1️⃣ **Brute force idea**

👉 For each `num`, we have 2 choices:

- Add it → `+num`
- Subtract it → `num`

👉 At each index:

- Recurse on next index with updated total.

---

### Brute force code

```python
def backtrack(i, total):
    if i == len(nums):
        return 1 if total == target else 0

    return (backtrack(i + 1, total + nums[i]) +
            backtrack(i + 1, total - nums[i]))

```

✅ Explore all 2^N possibilities.

---

### Base case

```python
if i == len(nums):
    return 1 if total == target else 0

```

👉 When we’ve used all numbers:

- If total = target → 1 valid way
- Else → 0

---

### Recurrence relation

👉 Number of ways from `(i, total)`:

```
ways(i, total) = ways(i+1, total + nums[i]) + ways(i+1, total - nums[i])

```

✅ Either:

- Use +nums[i]
- Use -nums[i]

---

## 2️⃣ **Why brute force is slow**

👉 **Exponential time: O(2^N)**

👉 Overlapping subproblems:

- Same index + total pair visited many times

E.g. at index 3, total 5 → you might reach this in multiple ways

---

## 3️⃣ **Add memoization (DP)**

👉 Let’s store:

```
dp[(i, total)] = number of ways to reach target from index i with sum total

```

So we compute each (i, total) only once.

---

### Memoized code

```python
dp = {}

def backtrack(i, total):
    if i == len(nums):
        return 1 if total == target else 0

    if (i, total) in dp:
        return dp[(i, total)]

    dp[(i, total)] = (backtrack(i + 1, total + nums[i]) +
                      backtrack(i + 1, total - nums[i]))

    return dp[(i, total)]

```

✅ Now it’s O(N * sumRange) where sumRange = possible range of totals.

✅ No repeated work!

---

## 📝 **Final recurrence + base case**

### Recurrence

```
ways(i, total) = ways(i+1, total + nums[i]) + ways(i+1, total - nums[i])

```

### Base case

```
ways(len(nums), total) =
  1 if total == target
  0 otherwise

```

---

## ⏱ Time + space

✅ **Time:** O(N * S)

👉 S = sum of nums * 2 (to cover all possible totals)

✅ **Space:** O(N * S) for DP

---

## 🌈 **Intuitive flow**

👉 Start at index 0, sum = 0

👉 Try adding +nums[0] → recurse

👉 Try adding -nums[0] → recurse

👉 Cache as you go so you don’t repeat work

---

💡 **Summary of evolution**

| Stage | Approach | Time | Notes |
| --- | --- | --- | --- |
| Brute force | Recurse all paths | O(2^N) | Slow, repeats work |
| Memoization | Cache (i, total) | O(N * S) | Efficient, avoids recomputation |

---

If you'd like, I can walk through a small input like `nums = [1,1,1,1,1], target=3` step-by-step! 🚀
