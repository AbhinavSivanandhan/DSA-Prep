Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

Optimal solution:

The goal is to count all palindromic substrings in the given string s. The code uses a center-expansion approach, which is efficient for identifying palindromes.

class Solution:
    def countSubstrings(self, s: str) -> int:
        resCount = 0  # Initialize the counter for palindromic substrings
        
        for i in range(len(s)):
            # Odd-length palindromes: Single character as center
            l, r = i, i  # Both left and right pointers start at the same index
            while l >= 0 and r < len(s) and s[l] == s[r]:  # Expand as long as it's a palindrome
                resCount += 1  # Count the palindrome
                l -= 1  # Expand left
                r += 1  # Expand right

            # Even-length palindromes: Pair of characters as center
            l, r = i, i + 1  # Left pointer starts at `i`, right at `i+1`
            while l >= 0 and r < len(s) and s[l] == s[r]:  # Expand as long as it's a palindrome
                resCount += 1  # Count the palindrome
                l -= 1  # Expand left
                r += 1  # Expand right
        
        return resCount  # Return the total count of palindromic substrings
