Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

Optimal solution:
class Solution:
    def countSubstrings(self, s: str) -> int:
        resSet=set()
        res = ""
        resLen = 0
        resCount = 0

        for i in range(len(s)):
            # odd length
            l, r = i, i
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    resSet.add(s[l : r + 1])
                    resCount+=1
                    # res = s[l : r + 1]
                    # resLen = r - l + 1
                l -= 1
                r += 1

            # even length
            l, r = i, i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    resSet.add(s[l : r + 1])
                    resCount+=1
                    # res = s[l : r + 1]
                    # resLen = r - l + 1
                l -= 1
                r += 1
        return resCount
        