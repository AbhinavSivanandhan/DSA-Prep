Question:
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

Answer:
https://leetcode.com/problems/coin-change/solutions/3242322/322-time-90-9-solution-with-step-by-step-explanation/
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        numCoins = len(coins)
        
        # Values in this array equal the number of coins needed to achieve the cost of the index
        minCoins = [amount + 1] * (amount + 1)
        minCoins[0] = 0
        
        # Loop through every needed amount
        for i in range(amount + 1):
            # Loop through every coin value
            for coin in coins:
                # Check that the coin is not bigger than the current amount
                if coin <= i:
                    # minCoins[i]: number of coins needed to make amount i
                    # minCoins[i-coin]: number of coins needed to make the amount before adding 
                    #                   the current coin to it (+1 to add the current coin)
                    minCoins[i] = min(minCoins[i], minCoins[i-coin] + 1)
        
        # Check if any combination of coins was found to create the amount
        if minCoins[amount] == amount + 1:
            return -1
        
        # Return the optimal number of coins to create the amount
        return minCoins[amount]

Combination Sum 4:
Problem:
Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

Soln:
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        numnums = len(nums)
        
        # Values in this array equal the number of nums needed to achieve the cost of the index
        minnums = [target + 1] * (target + 1)
        minnums[0] = 0
        
        # Loop through every needed target
        for i in range(target + 1):
            # Loop through every coin value
            for coin in nums:
                # Check that the coin is not bigger than the current target
                if coin <= i:
                    # minnums[i]: number of nums needed to make target i
                    # minnums[i-coin]: number of nums needed to make the target before adding 
                    #                   the current coin to it (+1 to add the current coin)
                    minnums[i] = min(minnums[i], minnums[i-coin] + 1)
        
        # Check if any combination of nums was found to create the target
        if minnums[target] == target + 1:
            return -1
        
        # Return the optimal number of nums to create the target
        return minnums[target]