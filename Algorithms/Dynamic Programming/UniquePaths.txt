Question:
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109

Solution:

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        d=[[0]*n]*m
        for i in reversed(range(0,m)):
            for j in reversed(range(0,n)):
                if i==m-1 or j==n-1:
                    d[i][j]=1
                else:
                    d[i][j]=d[i+1][j]+d[i][j+1]
        print(d)
        return d[0][0]