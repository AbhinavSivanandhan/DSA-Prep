Question:


Optimal Solution2 (easy):

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        d=[[0]*n]*m
        for i in reversed(range(0,m)):
            for j in reversed(range(0,n)):
                if i==m-1 or j==n-1:
                    d[i][j]=1
                else:
                    d[i][j]=d[i+1][j]+d[i][j+1]
        print(d)
        return d[0][0]

Optimal solution1:
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        row = [1] * n

        for i in range(m - 1):
            newRow = [1] * n
            for j in range(n - 2, -1, -1):
                newRow[j] = newRow[j + 1] + row[j]
            row = newRow
        return row[0]

        # O(n * m) O(n)
