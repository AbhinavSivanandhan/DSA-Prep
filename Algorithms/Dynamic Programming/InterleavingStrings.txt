Hint: Approach it like Longest Common Subsequence pattern, and if we reach T/True cell then return true

![image.png](attachment:0d566ddc-17b1-403f-b178-a9fb2f54673e:image.png)

Note: Memoisation solution is easy, DP solution is slightly more efficient and bit more logic

Worst case brute force decisions/subproblems could be 2^(m+n) at each decison. T(m.n)but as we cache, it becomes easier. if we find one branch to be true, can simply directly return true, no need to even cache

**Dynamic Programming (Bottom - up):**

**Time complexity: O(m∗n)**

**Space complexity: O(m∗n)**

Where m is the length of the string s1 and n is the length of the string s2.

```python
class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s1) + len(s2) != len(s3):
            return False

        dp = [[False] * (len(s2) + 1) for i in range(len(s1) + 1)]
        dp[len(s1)][len(s2)] = True

        for i in range(len(s1), -1, -1):
            for j in range(len(s2), -1, -1):
                if i < len(s1) and s1[i] == s3[i + j] and dp[i + 1][j]:
                    dp[i][j] = True
                if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:
                    dp[i][j] = True
        return dp[0][0]
```
