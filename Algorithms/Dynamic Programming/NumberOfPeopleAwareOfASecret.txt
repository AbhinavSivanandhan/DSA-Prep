Problem:
Number of People Aware of a Secret

On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.



Code:
class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        # Initialize an array `dp` where dp[i] represents the number of people 
        # who discover the secret on day `i`.
        dp = [0] * (n + 1)
        
        # Define the modulo value to handle large numbers
        mod = 10**9 + 7
        
        # Variable to keep track of the number of people currently sharing the secret
        noOfPeopleSharingSecret = 0
        
        # Variable to store the final answer
        ans = 0

        # On day 1, only one person knows the secret
        dp[1] = 1

        # Iterate through each day from 2 to n
        for i in range(2, n + 1):
            # Calculate the number of new people starting to share the secret
            # on day `i`. This happens `delay` days after they discover the secret.
            noOfNewPeopleSharingSecret = dp[max(i - delay, 0)]
            
            # Calculate the number of people forgetting the secret on day `i`.
            # This happens `forget` days after they discover the secret.
            noOfPeopleForgettingSecret = dp[max(i - forget, 0)]
            
            # Update the number of people currently sharing the secret.
            # Add the new sharers, subtract the forgetters, and take modulo `mod`.
            noOfPeopleSharingSecret = (noOfPeopleSharingSecret 
                                        + noOfNewPeopleSharingSecret 
                                        - noOfPeopleForgettingSecret 
                                        + mod) % mod

            # Store the number of people who found the secret on day `i` in `dp[i]`.
            dp[i] = noOfPeopleSharingSecret

        # After the `n` days, calculate the number of people who still remember the secret.
        # These are the people who discovered the secret between `n - forget + 1` and `n`.
        for i in range(n - forget + 1, n + 1):
            # Accumulate the number of people who still remember the secret.
            ans = (ans + dp[i]) % mod

        # Return the final answer.
        return ans



#Note: Yes, the final answer will be the same regardless of whether modulo is applied step-by-step or only at the end, provided there is no overflow or intermediate negative values during the calculations.
