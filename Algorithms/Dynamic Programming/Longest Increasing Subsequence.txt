Longest increasing subsequence (remember, this means it needn't be continuous)
https://leetcode.com/problems/longest-increasing-subsequence/submissions/949481478/

Brute force solution for subsequence problems, generate all subsequences using: Powersets or recursion ( T - O(2^N) S - O(N) )

1) Brute force solution using powersets:
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        pow_set_size = int(math.pow(2,len(nums)))
        s=[]
        maxlen=0
        maxseq=[]
        for i in range(0,pow_set_size):
            s=[]
            for j in range(0,len(nums)):
                if(i & (1<<j) > 0):
                    index=len(nums)-1-j
                    s.insert(0,nums[index])
          #  print(s)
            if len(s)>maxlen:
                if all(s[iter]<s[iter+1] for iter in range(0,len(s)-1)):
                    maxlen=len(s)
                    maxseq=s
        print(maxseq)
        return maxlen

2) Brute force solution using recursion

class Solution:
    def lis(self, ind, prev_index, arr, n):
        if ind==n:
            return 0
        l=0+self.lis(ind+1, prev_index,arr,n) #not including current index
        if prev_index==-1 or arr[ind]>arr[prev_index]:
            l = max(l, 1+self.lis(ind+1,ind, arr, n)) #including current index
        return l

    def lengthOfLIS(self, nums: List[int]) -> int:
        n=len(nums)
        return self.lis(0, -1, nums, n)

3) Optimal solution using dynamic programming:

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        LIS = [1] * len(nums)
        for i in range(len(nums) - 1, -1, -1):
            for j in range(i + 1, len(nums)):
                if nums[i] < nums[j]:
                    LIS[i] = max(LIS[i], 1 + LIS[j])
        return max(LIS)
4)
https://www.youtube.com/watch?v=cjWnW0hdF1Y&ab_channel=NeetCode
Point discussed around 7:20, 10:05, 12:20

5) Leetcode:
https://leetcode.com/problems/longest-increasing-subsequence/solutions/2395570/python3-7-lines-binsearch-cheating-w-explanation-t-m-94-82/

class Solution:     # Suppose, for example:
                    #           nums = [1,8,4,5,3,7],
                    # for which the longest strictly increasing subsequence is arr = [1,4,5,7],
                    # giving len(arr) = 4 as the answer
                    #
                    # Here's the plan:
                    #   1) Initiate arr = [num[0]], which in this example means arr = [1]
                    #     
                    #   2) Iterate through nums. 2a) If n in nums is greater than arr[-1], append n to arr. 2b) If 
                    #      not, determine the furthest position in arr at which n could be placed so that arr
                    #      remains strictly increasing, and overwrite the element at that position in arr with n.

                    #   3) Once completed, return the length of arr.

                    # Here's the iteration for the example:

                    #       nums = [ _1_, 8,4,5,3,7]     arr = [1]              (initial step)
                    #       nums = [1, _8_, 4,5,3,7]     arr = [1, 8]           (8 > 1, so    append 8)
                    #       nums = [1,8, _4_, 5,3,7]     arr = [1, 4]           (4 < 8, so overwrite 8)
                    #       nums = [1_8,4, _5_, 3,7]     arr = [1, 4, 5]        (5 > 4, so    append 5)
                    #       nums = [1_8,4,5, _3_, 7]     arr = [1, 3, 5]        (3 < 5, so overwrite 4)
                    #       nums = [1_8,4,5,3, _7_ ]     arr = [1, 3, 5, 7]     (7 > 5, so    append 7)    

                    # Notice that arr is not the sequence given above as the correct seq. The ordering for [1,3,5,7]
                    # breaks the "no changing the order" rule. Cheating? Maybe... However len(arr) = 4 is the 
                    # correct answer. Overwriting 4 with 3 did not alter the sequence's length.
                                
    def lengthOfLIS(self, nums: list[int]) -> int:

        arr = [nums.pop(0)]                  # <-- 1) initial step
 
        for n in nums:                       # <-- 2) iterate through nums
            
            if n > arr[-1]:                  # <--    2a)
                arr.append(n)

            else:                            # <--    2b)
                arr[bisect_left(arr, n)] = n 

        return len(arr)                      # <-- 3) return the length of arr




