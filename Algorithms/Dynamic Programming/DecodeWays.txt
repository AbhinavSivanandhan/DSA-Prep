Companies
A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

Optimal Solution: time O(n), space O(1)
class Solution:
    def numDecodings(self, s: str) -> int:
        if not s or s[0] == "0":
            return 0
        
        prev = 1  # dp[i - 2], for an empty string there's 1 way to decode it (doing nothing)
        curr = 1  # dp[i - 1], there's 1 way to decode a non-zero character if it's valid
        
        for i in range(1, len(s)):
            temp = curr  # store the current number of ways
            if s[i] == "0":
                curr = 0  # if the current character is '0', we can't decode it alone
            if 10 <= int(s[i - 1:i + 1]) <= 26:
                curr += prev  # if the two-character number is valid, add ways from dp[i-2]
            prev = temp  # move to the next character
        
        return curr


second-best Solution: time O(n), space O(n)

class Solution:
    def numDecodings(self, s: str) -> int:
        dp = [1] * (len(s) + 1)             # DP Array of size (n+1) initialized to 1
        if s[0] == "0": dp[1] = 0           # Checks for empty string

        for i in range(2, len(s) + 1):
            dp[i] = (dp[i - 1] if 1 <= int(s[i - 1]) <= 9 else 0) + (dp[i - 2] if 10 <= int(s[i - 2] + s[i - 1]) <= 26 else 0)
        return dp[-1]
